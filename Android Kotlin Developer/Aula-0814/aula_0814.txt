private val appDb by lazy {
	view?.context?.let {
		AppDatabase.getDatabase(it)
	}
}

forma de acessar o AppDb nas classes após a inicialização do contexto, para não ter problema, já que o getDatabase depende do context

    abstract fun countryDAO(): CountryDAO

Codificação de um singleton para ter acesso ao banco de dados

    companion object {
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            if (INSTANCE != null) {
                return INSTANCE!! //as duas !! é uma forma de forçar para o kotlin de que não vai ser null
            } else {
                val instance = Room.databaseBuilder(
                    context,
                    AppDatabase::class.java,
                    COUNTRY_DATABASE_NAME
                ).allowMainThreadQueries().build() //gambiarra para rodar na thread main, mas não é bom porque trava o app
                INSTANCE = instance //vai definir o INSTANCE
                return instance //retornar instance
            }

//            return INSTANCE ?: let { //Se INSTANCE for null ?: vai chamar o let
//                val instance = Room.databaseBuilder(
//                    context,
//                    AppDatabase::class.java,
//                    COUNTRY_DATABASE_NAME
//                ).allowMainThreadQueries().build() //gambiarra para rodar na thread main, mas não é bom porque trava o app
//                INSTANCE = instance //vai definir o INSTANCE
//                instance //retornar instance
//            }
        }
    }

A ideia é evitar criar várias instâncias do banco a cada iteração com a aplicação que chame o getDatabase

Após ter o aplicativo rodando, através da aba App Inspection podemos acessar informações sobre o database da aplicação, permitindo ver os dados
das tabelas

